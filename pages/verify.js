import React, { useEffect, useState } from 'react'
import Link from "next/link";
import Head from 'next/head'
import { Inter } from 'next/font/google'
import { loadUser, sendOTP , verifyOtp } from '@/src/actions/userActions';
import { useAlert } from 'react-alert';
import {useSelector , useDispatch} from 'react-redux';
import { useRouter } from 'next/router';
import { CLEAR_ERRORS , VERIFY_RESET , EMAIL_RESET } from '@/src/constants/userConstants';
const inter = Inter({ subsets: ['latin'] })

export default function Verify(){
    const [enteredOtp , setEnteredOTP] = useState();
    const [otp , setOTP] = useState();
    const [loading , setLoading] = useState(false);
    const [timerCount , setTC] = useState(0);
    const [count , setCount] = useState(0);
    const alertObj = useAlert();
    const handleChange = (e)=>{
        setEnteredOTP(e.target.value);
    }
    const handleSubmit = (e)=>{
        e.preventDefault();
        if(enteredOtp == otp){
            setLoading(false);
            dispatch(verifyOtp(enteredOtp));
        }else{
            alertObj.error("Wrong OTP");
        }
    }
    const dispatch = useDispatch();
    const router = useRouter();
    const userState = useSelector((state)=>state.user);
    const generalState = useSelector((state)=>state.general);
    useEffect(()=>{
        if(userState.isAuthenticated){
            if(userState.user.user.verified){
                dispatch(loadUser());
                router.replace("/blogs");
            }
        }else{
            router.replace("/");
        }
    },[userState]);
    useEffect(()=>{
        if(generalState.success){
            if(generalState.verified){
                dispatch(loadUser());
                router.replace("/blogs");
                dispatch({type:VERIFY_RESET});
            }
            if(generalState.emailSent){
                alertObj.info("EMAIL SENT");
                dispatch({type:EMAIL_RESET});
            }
        }else{
            if(generalState.error){
                alertObj.error(generalState.error);
                dispatch({type:CLEAR_ERRORS});
            }
        }
    },[generalState]);
    const send = async()=>{
        let count = 3 * 60;
        const timer = setInterval(function() {
            count--;
            setTC(count);
            if (count === 0) {
                clearInterval(timer);
                setLoading(false);
            }
        }, 1000);
    }
    useEffect(()=>{
        if(loading && otp){
            send();
        }
    },[loading,otp]);
    const handleSendOtp = (e)=>{
        e.preventDefault();
        setLoading(true);
        setCount((prev)=>{return prev+1});
        const otpc = Math.floor((Math.random()*1000000)+1)
        setOTP(otpc);
        dispatch(sendOTP(otpc));
    }
  return (
    <>
        <Head>
        <title>Verify</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className='flex relative w-[100vw] h-[100vh] items-center justify-center'>
            <div className='flex relative w-[80%] mt-[60px] h-fit items-center flex-col justify-center border-2 border-gray-700'>
              <div className='flex items-center w-[100%] justify-center py-[20px] h-[20%] max-h-[100px]'>
                <h1 className='text-5xl'>Verify Your Email !</h1>
              </div>
              <form className='relative flex flex-col w-[100%] px-[20px] py-[20px] gap-[10px] border-t border-gray-700 h-fit'>
                <div className='flex flex-col relative w-[100%] h-fit'>
                <label for="message" className="block mb-2 text-sm font-medium text-white ">Enter OTP</label>
                <input type="text" id="message" onChange={handleChange} rows="4" className="block p-2.5 w-full text-sm text-white bg-transparent border border-gray-600 placeholder-gray-400 outline-none" placeholder="Enter OTP Ex:- 141231" required/>
                </div>
                <label for="message" className="block text-sm font-medium text-white ">{!loading || timerCount == 0 ? "Click Button to Send OTP ! " : "You can Resend after " + timerCount + " seconds"}</label>
                <button className={`transition-colors duration-300 bottom-[0px] border border-gray-700 right-[0px] ${loading ? "text-gray-500" : "hover:bg-purple-500 hover:text-black"} px-[20px] py-[10px]`} type='submit' onClick={handleSendOtp} disabled={loading}>{count == 0 ? "Send OTP !" : "Resend OTP !"}</button>
                <button className='transition-colors duration-300 bottom-[0px] border border-gray-700 right-[0px] hover:bg-purple-500 hover:text-black px-[20px] py-[10px]' type='submit' onClick={handleSubmit}>Verify !</button>
              </form>
            </div>
          </div>
    </>
  )
}
